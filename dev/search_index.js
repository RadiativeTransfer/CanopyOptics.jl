var documenterSearchIndex = {"docs":
[{"location":"#CanopyOptics.jl","page":"Home","title":"CanopyOptics.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A package to compute canopy scattering properties","category":"page"},{"location":"#Package-Features","page":"Home","title":"Package Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Use leaf angle distributions to compute bi-lambertian area scattering matrices\nCompute specular reflection\nCompute leaf reflectance and transmittance based on Prospect-PRO","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The latest release of CanopyOptics can be installed from the Julia REPL prompt with","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> ]add https://github.com/RemoteSensingTools/CanopyOptics.jl","category":"page"},{"location":"#Code-docs:","page":"Home","title":"Code docs:","text":"","category":"section"},{"location":"#Types","page":"Home","title":"Types","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [CanopyOptics]\nPrivate = false\nOrder = [:type]","category":"page"},{"location":"#CanopyOptics.AbstractCanopyScatteringType","page":"Home","title":"CanopyOptics.AbstractCanopyScatteringType","text":"Abstract Type for canopy scattering\n\n\n\n\n\n","category":"type"},{"location":"#CanopyOptics.BiLambertianCanopyScattering","page":"Home","title":"CanopyOptics.BiLambertianCanopyScattering","text":"Model for bi-lambertian canopy leaf scattering\n\n\n\n\n\n","category":"type"},{"location":"#CanopyOptics.LeafOpticalProperties","page":"Home","title":"CanopyOptics.LeafOpticalProperties","text":"struct PigmentOpticalProperties{FT}\n\nA struct which stores important absorption cross sections of pigments, water, etc\n\nFields\n\nλ\nWavelength [length]\nnᵣ\nRefractive index of leaf material\nKcab\nspecific absorption coefficient of chlorophyll (a+b) [cm² μg⁻¹]\nKcar\nspecific absorption coefficient of carotenoids [cm² μg⁻¹]\nKant\nspecific absorption coefficient of Anthocyanins [cm² nmol⁻¹]\nKb\nspecific absorption coefficient of brown pigments (arbitrary units)\nKw\nspecific absorption coefficient of water [cm⁻¹]\nKm\nspecific absorption coefficient of dry matter [cm² g⁻¹]\nKp\nspecific absorption coefficient of proteins [cm² g⁻¹]\nKcbc\nspecific absorption coefficient of carbon based constituents [cm² g⁻¹]\n\n\n\n\n\n","category":"type"},{"location":"#CanopyOptics.LeafProspectProProperties","page":"Home","title":"CanopyOptics.LeafProspectProProperties","text":"struct LeafProperties{FT}\n\nA struct which stores important variables of leaf chemistry and structure\n\nFields\n\nN\nLeaf structure parameter [0-3]\nCcab\nChlorophyll a+b content [µg cm⁻²]\nCcar\nCarotenoid content [µg cm⁻²]\nCanth\nAnthocynanin content [nmol cm⁻²]\nCbrown\nBrown pigments content in arbitrary units\nCw\nEquivalent water thickness [cm], typical about 0.002-0.015\nCm\nDry matter content (dry leaf mass per unit area) [g cm⁻²], typical about 0.003-0.016\nCprot\nprotein content [g/cm]\nCcbc\nCarbone-based constituents content in [g/cm⁻²] (cellulose, lignin, sugars...)\n\n\n\n\n\n","category":"type"},{"location":"#CanopyOptics.SpecularCanopyScattering","page":"Home","title":"CanopyOptics.SpecularCanopyScattering","text":"Model for specular canopy leaf scattering\n\n\n\n\n\n","category":"type"},{"location":"#CanopyOptics.dirVector","page":"Home","title":"CanopyOptics.dirVector","text":"Struct for spherical coordinate directions in θ (elevation angle) and ϕ (azimuth angle)\n\n\n\n\n\n","category":"type"},{"location":"#CanopyOptics.dirVector_μ","page":"Home","title":"CanopyOptics.dirVector_μ","text":"Struct for spherical coordinate directions in θ (elevation angle) and ϕ (azimuth angle)\n\n\n\n\n\n","category":"type"},{"location":"#Functions","page":"Home","title":"Functions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [CanopyOptics]\nPrivate = false\nOrder = [:function]","category":"page"},{"location":"#CanopyOptics.createLeafOpticalStruct-Tuple{Any}","page":"Home","title":"CanopyOptics.createLeafOpticalStruct","text":"createLeafOpticalStruct(λ_bnds)\n\nLoads in the PROSPECT-PRO database of pigments (and other) absorption cross section in leaves, returns a [`LeafOpticalProperties`](@ref) type struct with spectral units attached.\n\nArguments\n\n- `λ_bnds` an array (with or without a spectral grid unit) that defines the upper and lower limits over which to average the absorption cross sections\n\nExamples\n\njulia> using Unitful                                                               # Need to include Unitful package \njulia> opti = createLeafOpticalStruct((400.0:5:2400)*u\"nm\");                       # in nm\njulia> opti = createLeafOpticalStruct((0.4:0.1:2.4)*u\"μm\");                        # in μm\njulia> opti = CanopyOptics.createLeafOpticalStruct((10000.0:100:25000.0)u\"1/cm\");  # in wavenumber (cm⁻¹)\n\n\n\n\n\n","category":"method"},{"location":"#CanopyOptics.createLeafOpticalStruct-Tuple{}","page":"Home","title":"CanopyOptics.createLeafOpticalStruct","text":"createLeafOpticalStruct()\nAs in createLeafOpticalStruct(λ_bnds) but reads in the in Prospect-PRO database at original resolution (400-2500nm in 1nm steps)\n\n\n\n\n\n","category":"method"},{"location":"#CanopyOptics.prospect-Union{Tuple{FT}, Tuple{LeafProspectProProperties{FT}, Any}} where FT<:AbstractFloat","page":"Home","title":"CanopyOptics.prospect","text":"prospect(leaf::LeafProspectProProperties{FT},\n                optis) where {FT<:AbstractFloat}\n\nComputes leaf optical properties (reflectance and transittance) based on PROSPECT-PRO\n\nArguments\n\nleaf  LeafProspectProProperties type struct which provides leaf composition\noptis LeafOpticalProperties type struct, which provides absorption cross sections and spectral grid\n\nExamples\n\njulia-repl julia> opti = createLeafOpticalStruct((400.0:5:2400)*u\"nm\"); julia> leaf = LeafProspectProProperties{Float64}(Ccab=30.0); julia> T,R = prospect(leaf,opti);`\n\n\n\n\n\n","category":"method"}]
}
