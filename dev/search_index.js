var documenterSearchIndex = {"docs":
[{"location":"pages/tutorials/specular/","page":"Specular Canopy Scattering","title":"Specular Canopy Scattering","text":"EditURL = \"https://github.com/RemoteSensingTools/CanopyOptics.jl/blob/main/docs/src/pages/tutorials/specular.jl\"","category":"page"},{"location":"pages/tutorials/specular/#Specular-Canopy-Scattering","page":"Specular Canopy Scattering","title":"Specular Canopy Scattering","text":"","category":"section"},{"location":"pages/tutorials/specular/","page":"Specular Canopy Scattering","title":"Specular Canopy Scattering","text":"Using packages:","category":"page"},{"location":"pages/tutorials/specular/","page":"Specular Canopy Scattering","title":"Specular Canopy Scattering","text":"using Plots, Distributions#, PyPlot\nusing CanopyOptics\npyplot()\ntheme(:ggplot2)","category":"page"},{"location":"pages/tutorials/specular/","page":"Specular Canopy Scattering","title":"Specular Canopy Scattering","text":"Create a specular model with refractive index and \"roughness\" Œ∫","category":"page"},{"location":"pages/tutorials/specular/","page":"Specular Canopy Scattering","title":"Specular Canopy Scattering","text":"specularMod = CanopyOptics.SpecularCanopyScattering(n·µ£=1.5, Œ∫=0.2)","category":"page"},{"location":"pages/tutorials/specular/","page":"Specular Canopy Scattering","title":"Specular Canopy Scattering","text":"Use standard planophile leaf distribution:","category":"page"},{"location":"pages/tutorials/specular/","page":"Specular Canopy Scattering","title":"Specular Canopy Scattering","text":"LD = CanopyOptics.planophile_leaves2()","category":"page"},{"location":"pages/tutorials/specular/","page":"Specular Canopy Scattering","title":"Specular Canopy Scattering","text":"Create some discretized angles: Azimuth (in radians)","category":"page"},{"location":"pages/tutorials/specular/","page":"Specular Canopy Scattering","title":"Specular Canopy Scattering","text":"œï = range(0.0, 2œÄ,  length=200);\nnothing #hide","category":"page"},{"location":"pages/tutorials/specular/","page":"Specular Canopy Scattering","title":"Specular Canopy Scattering","text":"Polar angle as cos(Œò)","category":"page"},{"location":"pages/tutorials/specular/","page":"Specular Canopy Scattering","title":"Specular Canopy Scattering","text":"Œº,w = CanopyOptics.gauleg(180,0.0,1.0);\nnothing #hide","category":"page"},{"location":"pages/tutorials/specular/","page":"Specular Canopy Scattering","title":"Specular Canopy Scattering","text":"Create directional vectors:","category":"page"},{"location":"pages/tutorials/specular/","page":"Specular Canopy Scattering","title":"Specular Canopy Scattering","text":"dirs = [CanopyOptics.dirVector_Œº(a,b) for a in Œº, b in œï];\nnothing #hide","category":"page"},{"location":"pages/tutorials/specular/","page":"Specular Canopy Scattering","title":"Specular Canopy Scattering","text":"Compute specular reflectance:","category":"page"},{"location":"pages/tutorials/specular/","page":"Specular Canopy Scattering","title":"Specular Canopy Scattering","text":"R = CanopyOptics.compute_reflection.([specularMod], [dirs[50,1]], dirs, [LD]);\nnothing #hide","category":"page"},{"location":"pages/tutorials/specular/","page":"Specular Canopy Scattering","title":"Specular Canopy Scattering","text":"Polar plot of reflectance","category":"page"},{"location":"pages/tutorials/specular/","page":"Specular Canopy Scattering","title":"Specular Canopy Scattering","text":"contourf(œï, acos.(Œº), R,proj=:polar, ylim=(0,œÄ/2), alpha=0.8)","category":"page"},{"location":"pages/tutorials/specular/#Animation-over-different-Beta-leaf-distributions","page":"Specular Canopy Scattering","title":"Animation over different Beta leaf distributions","text":"","category":"section"},{"location":"pages/tutorials/specular/","page":"Specular Canopy Scattering","title":"Specular Canopy Scattering","text":"steps = 0.1:0.1:5\nŒ± = [collect(steps); 5*ones(length(steps))]\nŒ≤ = [ 5*ones(length(steps)); reverse(collect(steps));]\nx = 0:0.01:1\n\nanim = @animate for i ‚àà eachindex(Œ±)\n    LD = CanopyOptics.LeafDistribution(Beta(Œ±[i],Œ≤[i]), 2/œÄ)\n    R = CanopyOptics.compute_reflection.([specularMod], [dirs[120,1]], dirs, [LD])\n    l = @layout [a  b ]\n    p0 = plot(rad2deg.(œÄ * x/2), pdf.(LD.LD,x), legend=false, ylim=(0,3), title=\"Leaf angle distribution\", xlabel=\"Œò (degrees)\")\n    p1 = contourf(œï, acos.(Œº), R,proj=:polar, ylim=(0,œÄ/2), label=nothing, clims=(0,0.04))\n    plot(p0, p1,  layout = l, margin=5Plots.mm)\n    plot!(size=(700,300))\nend\n\ngif(anim, \"anim_fps10.gif\", fps = 10)","category":"page"},{"location":"pages/tutorials/specular/","page":"Specular Canopy Scattering","title":"Specular Canopy Scattering","text":"","category":"page"},{"location":"pages/tutorials/specular/","page":"Specular Canopy Scattering","title":"Specular Canopy Scattering","text":"This page was generated using Literate.jl.","category":"page"},{"location":"pages/tutorials/bilambertian/","page":"Bilambertian Canopy Scattering","title":"Bilambertian Canopy Scattering","text":"EditURL = \"https://github.com/RemoteSensingTools/CanopyOptics.jl/blob/main/docs/src/pages/tutorials/bilambertian.jl\"","category":"page"},{"location":"pages/tutorials/bilambertian/","page":"Bilambertian Canopy Scattering","title":"Bilambertian Canopy Scattering","text":"push!(LOAD_PATH,\"../../../../src/\");\nnothing #hide","category":"page"},{"location":"pages/tutorials/bilambertian/#Bilambertian-Canopy-Scattering","page":"Bilambertian Canopy Scattering","title":"Bilambertian Canopy Scattering","text":"","category":"section"},{"location":"pages/tutorials/bilambertian/","page":"Bilambertian Canopy Scattering","title":"Bilambertian Canopy Scattering","text":"Using packages:","category":"page"},{"location":"pages/tutorials/bilambertian/","page":"Bilambertian Canopy Scattering","title":"Bilambertian Canopy Scattering","text":"using Plots, Distributions\nusing CanopyOptics\ntheme(:ggplot2)","category":"page"},{"location":"pages/tutorials/bilambertian/","page":"Bilambertian Canopy Scattering","title":"Bilambertian Canopy Scattering","text":"Compute quadrature points:","category":"page"},{"location":"pages/tutorials/bilambertian/","page":"Bilambertian Canopy Scattering","title":"Bilambertian Canopy Scattering","text":"Œº,w = CanopyOptics.gauleg(20,0.0,1.0)","category":"page"},{"location":"pages/tutorials/bilambertian/","page":"Bilambertian Canopy Scattering","title":"Bilambertian Canopy Scattering","text":"Use standard planophile leaf distribution:","category":"page"},{"location":"pages/tutorials/bilambertian/","page":"Bilambertian Canopy Scattering","title":"Bilambertian Canopy Scattering","text":"LD = CanopyOptics.planophile_leaves2()","category":"page"},{"location":"pages/tutorials/bilambertian/","page":"Bilambertian Canopy Scattering","title":"Bilambertian Canopy Scattering","text":"Use a Bilambertian model and specify Reflectance R and Transmission T","category":"page"},{"location":"pages/tutorials/bilambertian/","page":"Bilambertian Canopy Scattering","title":"Bilambertian Canopy Scattering","text":"BiLambMod = CanopyOptics.BiLambertianCanopyScattering(R=0.4,T=0.2)","category":"page"},{"location":"pages/tutorials/bilambertian/","page":"Bilambertian Canopy Scattering","title":"Bilambertian Canopy Scattering","text":"Compute Scattering Matrices ùêô‚Å∫‚Å∫, ùêô‚Åª‚Å∫ for 0th Fourier moment:","category":"page"},{"location":"pages/tutorials/bilambertian/","page":"Bilambertian Canopy Scattering","title":"Bilambertian Canopy Scattering","text":"ùêô‚Å∫‚Å∫, ùêô‚Åª‚Å∫ = CanopyOptics.compute_Z_matrices(BiLambMod, Œº, LD, 0)","category":"page"},{"location":"pages/tutorials/bilambertian/","page":"Bilambertian Canopy Scattering","title":"Bilambertian Canopy Scattering","text":"Plots matrices (shows single scattering contributions for incoming and outgoing directions)","category":"page"},{"location":"pages/tutorials/bilambertian/","page":"Bilambertian Canopy Scattering","title":"Bilambertian Canopy Scattering","text":"l = @layout [a  b]\np1 = contourf(Œº, Œº, ùêô‚Åª‚Å∫, title=\"Z‚Åª‚Å∫ (Reflection)\", xlabel=\"ŒºÍúú\", ylabel=\"ŒºÍúõ\")\np2 = contourf(Œº, Œº, ùêô‚Å∫‚Å∫, title=\"Z‚Å∫‚Å∫ (Transmission)\", xlabel=\"ŒºÍúõ\", ylabel=\"ŒºÍúõ\")\nplot(p1, p2,  layout = l, margin=5Plots.mm)\nplot!(size=(900,350))","category":"page"},{"location":"pages/tutorials/bilambertian/#Animation-over-different-Beta-leaf-distributions","page":"Bilambertian Canopy Scattering","title":"Animation over different Beta leaf distributions","text":"","category":"section"},{"location":"pages/tutorials/bilambertian/","page":"Bilambertian Canopy Scattering","title":"Bilambertian Canopy Scattering","text":"steps = 0.1:0.1:5\nŒ± = [collect(steps); 5*ones(length(steps))]\nŒ≤ = [ 5*ones(length(steps)); reverse(collect(steps));]\nx = 0:0.01:1\n\nanim = @animate for i ‚àà eachindex(Œ±)\n    LD = CanopyOptics.LeafDistribution(Beta(Œ±[i],Œ≤[i]), 2/œÄ)\n    Z‚Å∫‚Å∫, Z‚Åª‚Å∫ = CanopyOptics.compute_Z_matrices(BiLambMod, Œº, LD, 0)\n    l = @layout [a  b  c]\n    p0 = plot(rad2deg.(œÄ * x/2), pdf.(LD.LD,x), legend=false, ylim=(0,3), title=\"Leaf angle distribution\", xlabel=\"Œò (degrees)\")\n    p1 = contourf(Œº, Œº, Z‚Åª‚Å∫, title=\"Z‚Åª‚Å∫ (Reflection)\", xlabel=\"ŒºÍúú\", ylabel=\"ŒºÍúõ\",clims=(0.2,3))\n    p2 = contourf(Œº, Œº, Z‚Å∫‚Å∫, title=\"Z‚Å∫‚Å∫ (Transmission)\", xlabel=\"ŒºÍúõ\", ylabel=\"ŒºÍúõ\",clims=(0.2,3))\n    plot(p0, p1, p2,  layout = l, margin=5Plots.mm)\n    plot!(size=(1100,300))\nend\n\ngif(anim, \"anim_fps10.gif\", fps = 10)","category":"page"},{"location":"pages/tutorials/bilambertian/","page":"Bilambertian Canopy Scattering","title":"Bilambertian Canopy Scattering","text":"","category":"page"},{"location":"pages/tutorials/bilambertian/","page":"Bilambertian Canopy Scattering","title":"Bilambertian Canopy Scattering","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#CanopyOptics.jl","page":"Home","title":"CanopyOptics.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A package to compute canopy scattering properties","category":"page"},{"location":"#Package-Features","page":"Home","title":"Package Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Use leaf angle distributions to compute bi-lambertian area scattering matrices\nCompute specular reflection\nCompute leaf reflectance and transmittance based on Prospect-PRO","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The latest release of CanopyOptics can be installed from the Julia REPL prompt with","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> ]add https://github.com/RemoteSensingTools/CanopyOptics.jl","category":"page"},{"location":"#Code-docs:","page":"Home","title":"Code docs:","text":"","category":"section"},{"location":"#Types","page":"Home","title":"Types","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [CanopyOptics]\nPrivate = false\nOrder = [:type]","category":"page"},{"location":"#CanopyOptics.AbstractCanopyScatteringType","page":"Home","title":"CanopyOptics.AbstractCanopyScatteringType","text":"Abstract Type for canopy scattering\n\n\n\n\n\n","category":"type"},{"location":"#CanopyOptics.BiLambertianCanopyScattering","page":"Home","title":"CanopyOptics.BiLambertianCanopyScattering","text":"Model for bi-lambertian canopy leaf scattering\n\n\n\n\n\n","category":"type"},{"location":"#CanopyOptics.LeafOpticalProperties","page":"Home","title":"CanopyOptics.LeafOpticalProperties","text":"struct PigmentOpticalProperties{FT}\n\nA struct which stores important absorption cross sections of pigments, water, etc\n\nFields\n\nŒª\nWavelength [length]\nn·µ£\nRefractive index of leaf material\nKcab\nspecific absorption coefficient of chlorophyll (a+b) [cm¬≤ Œºg‚Åª¬π]\nKcar\nspecific absorption coefficient of carotenoids [cm¬≤ Œºg‚Åª¬π]\nKant\nspecific absorption coefficient of Anthocyanins [cm¬≤ nmol‚Åª¬π]\nKb\nspecific absorption coefficient of brown pigments (arbitrary units)\nKw\nspecific absorption coefficient of water [cm‚Åª¬π]\nKm\nspecific absorption coefficient of dry matter [cm¬≤ g‚Åª¬π]\nKp\nspecific absorption coefficient of proteins [cm¬≤ g‚Åª¬π]\nKcbc\nspecific absorption coefficient of carbon based constituents [cm¬≤ g‚Åª¬π]\n\n\n\n\n\n","category":"type"},{"location":"#CanopyOptics.LeafProspectProProperties","page":"Home","title":"CanopyOptics.LeafProspectProProperties","text":"struct LeafProperties{FT}\n\nA struct which stores important variables of leaf chemistry and structure\n\nFields\n\nN\nLeaf structure parameter [0-3]\nCcab\nChlorophyll a+b content [¬µg cm‚Åª¬≤]\nCcar\nCarotenoid content [¬µg cm‚Åª¬≤]\nCanth\nAnthocynanin content [nmol cm‚Åª¬≤]\nCbrown\nBrown pigments content in arbitrary units\nCw\nEquivalent water thickness [cm], typical about 0.002-0.015\nCm\nDry matter content (dry leaf mass per unit area) [g cm‚Åª¬≤], typical about 0.003-0.016\nCprot\nprotein content [g/cm]\nCcbc\nCarbone-based constituents content in [g/cm‚Åª¬≤] (cellulose, lignin, sugars...)\n\n\n\n\n\n","category":"type"},{"location":"#CanopyOptics.SpecularCanopyScattering","page":"Home","title":"CanopyOptics.SpecularCanopyScattering","text":"Model for specular canopy leaf scattering\n\n\n\n\n\n","category":"type"},{"location":"#CanopyOptics.dirVector","page":"Home","title":"CanopyOptics.dirVector","text":"dirVector{FT}\n\nStruct for spherical coordinate directions in Œ∏ (elevation angle) and œï (azimuth angle)\n\nFields\n\nŒ∏\nœï\n\n\n\n\n\n","category":"type"},{"location":"#CanopyOptics.dirVector_Œº","page":"Home","title":"CanopyOptics.dirVector_Œº","text":"dirVector_Œº{FT}\n\nStruct for spherical coordinate directions in Œ∏ (elevation angle) and œï (azimuth angle)\"\n\nFields\n\nŒº\nœï\n\n\n\n\n\n","category":"type"},{"location":"#Functions","page":"Home","title":"Functions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [CanopyOptics]\nPrivate = false\nOrder = [:function]","category":"page"},{"location":"#CanopyOptics.G-Union{Tuple{FT}, Tuple{Array{FT}, CanopyOptics.AbstractLeafDistribution}} where FT","page":"Home","title":"CanopyOptics.G","text":"G(Œº::Array{FT}, LD::AbstractLeafDistribution; nLeg=20)\n\nReturns the integrated projection of leaf area in the direction of Œº, assumes azimuthally uniform distribution and a LD distribution for leaf polar angle Œ∏.  This function is often referred to as the function O(B) (Goudriaan 1977) or G(Œñ) (Ross 1975,1981), see Bonan modeling book, eqs. 14.21-14.26. \n\nArguments\n\nŒº an array of cos(Œ∏) (directions [0,1]) \nLD an AbstractLeafDistribution type struct, includes a leaf distribution function\nnLeg an optional parameter for the number of legendre polynomials to integrate over the leaf distribution (default=20)\n\nExamples\n\njulia> Œº,w = CanopyOptics.gauleg(10,0.0,1.0);       # Create 10 quadrature points in Œº      \njulia> LD  = CanopyOptics.spherical_leaves()        # Create a default spherical leaf distribution\njulia> G   = CanopyOptics.G(Œº, LD)                  # Compute G(Œº)\n10-element Vector{Float64}:\n 0.5002522783000879\n 0.5002715115149204\n 0.5003537989277846\n 0.5004432798701134\n 0.5005134448870893\n 0.5003026448466977\n 0.4999186257540982\n 0.4994511190721635\n 0.49907252201082375\n 0.49936166823681594\n\n\n\n\n\n","category":"method"},{"location":"#CanopyOptics.compute_Z_matrices-Union{Tuple{FT}, Tuple{BiLambertianCanopyScattering, Vector{FT}, CanopyOptics.AbstractLeafDistribution, Int64}} where FT","page":"Home","title":"CanopyOptics.compute_Z_matrices","text":"compute_Z_matrices(mod::BiLambertianCanopyScattering, Œº::Array{FT,1}, LD::AbstractLeafDistribution, m::Int)\n\nComputes the single scattering Z matrices (ùêô‚Å∫‚Å∫ for same incoming and outgoing sign of Œº, ùêô‚Åª‚Å∫ for a change in direction). Internally computes the azimuthally-averaged area scattering transfer function following Shultis and Myneni (https://doi.org/10.1016/0022-4073(88)90079-9), Eq 43::\n\nŒì(Œº - Œº) = int_0^1 dŒº_L g_L(Œº_L)t_L Œ®(Œº Œº Œº_L) + r_L Œ®(Œº Œº Œº_L)\n\nassuming an azimuthally uniform leaf angle distribution. Normalized Œì as ùêô = 4Œì/(œñ‚ãÖG(Œº)). Returns ùêô‚Å∫‚Å∫, ùêô‚Åª‚Å∫ \n\nArguments\n\nmod : A bilambertian canopy scattering model BiLambertianCanopyScattering, uses R,T,nQuad from that model.\nŒº::Array{FT,1}: Quadrature points ‚àà [0,1]\nLD a AbstractLeafDistribution struct that describes the leaf angular distribution function.\nm: Fourier moment (for azimuthally uniform leave distributions such as here, only m=0 returns non-zero matrices)\n\n\n\n\n\n","category":"method"},{"location":"#CanopyOptics.createLeafOpticalStruct-Tuple{Any}","page":"Home","title":"CanopyOptics.createLeafOpticalStruct","text":"createLeafOpticalStruct(Œª_bnds)\n\nLoads in the PROSPECT-PRO database of pigments (and other) absorption cross section in leaves, returns a [`LeafOpticalProperties`](@ref) type struct with spectral units attached.\n\nArguments\n\n- `Œª_bnds` an array (with or without a spectral grid unit) that defines the upper and lower limits over which to average the absorption cross sections\n\nExamples\n\njulia> using Unitful                                                               # Need to include Unitful package \njulia> opti = createLeafOpticalStruct((400.0:5:2400)*u\"nm\");                       # in nm\njulia> opti = createLeafOpticalStruct((0.4:0.1:2.4)*u\"Œºm\");                        # in Œºm\njulia> opti = CanopyOptics.createLeafOpticalStruct((10000.0:100:25000.0)u\"1/cm\");  # in wavenumber (cm‚Åª¬π)\n\n\n\n\n\n","category":"method"},{"location":"#CanopyOptics.createLeafOpticalStruct-Tuple{}","page":"Home","title":"CanopyOptics.createLeafOpticalStruct","text":"createLeafOpticalStruct()\nAs in createLeafOpticalStruct(Œª_bnds) but reads in the in Prospect-PRO database at original resolution (400-2500nm in 1nm steps)\n\n\n\n\n\n","category":"method"},{"location":"#CanopyOptics.prospect-Union{Tuple{FT}, Tuple{LeafProspectProProperties{FT}, Any}} where FT<:AbstractFloat","page":"Home","title":"CanopyOptics.prospect","text":"prospect(leaf::LeafProspectProProperties{FT},\n                optis) where {FT<:AbstractFloat}\n\nComputes leaf optical properties (reflectance and transittance) based on PROSPECT-PRO\n\nArguments\n\nleaf  LeafProspectProProperties type struct which provides leaf composition\noptis LeafOpticalProperties type struct, which provides absorption cross sections and spectral grid\n\nExamples\n\njulia-repl julia> opti = createLeafOpticalStruct((400.0:5:2400)*u\"nm\"); julia> leaf = LeafProspectProProperties{Float64}(Ccab=30.0); julia> T,R = prospect(leaf,opti);`\n\n\n\n\n\n","category":"method"}]
}
